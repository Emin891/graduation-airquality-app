import streamlit as st
st.set_page_config(page_title="Air Pollutant Prediction", page_icon=":earth_africa:", layout="wide")

# import pandas as pd
# import requests  
# import pickle
# import numpy as np
# import datetime
# import matplotlib.pyplot as plt
# import seaborn as sns
# from PIL import Image

from streamlit_option_menu import option_menu
from app_pages.tahmin_page import show as show_tahmin
from app_pages.veri_analizi_page import show as show_veri_analizi
from app_pages.ana_sayfa_page import show as show_ana_sayfa
from app_pages.info_page import show as show_info



  
# df = pd.read_csv("cleaned_final.csv")

# import requests
# import datetime

# API_KEY = "TMETWPYHK5LX45VNWZ4PSDJWF"
# LOG_FILE = "api_log.txt"

# def get_weather_by_ilce(ilce, selected_datetime):
#     location = f"{ilce} istanbul"
#     datetime_str = selected_datetime.strftime('%Y-%m-%dT%H:%M:%S')

#     url = (
#         f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/"
#         f"timeline/{location}/{datetime_str}"
#         f"?unitGroup=metric&key={API_KEY}&include=hours&contentType=json"
#     )

#     try:
#         response = requests.get(url)
#         response.raise_for_status()
#         data = response.json()

#         query_cost = data.get("queryCost", "Bilinmiyor")
#         now_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

#         log_entry = f"[{now_str}] ƒ∞l√ße: {ilce}, Tarih/Saat: {selected_datetime}, QueryCost: {query_cost}\n"
#         print(log_entry.strip())

#         with open(LOG_FILE, "a", encoding="utf-8") as f:
#             f.write(log_entry)

#         # G√ºn√ºn saatlik veriler
#         hours_data = data.get("days", [])[0].get("hours", [])

#         hedef_saat = selected_datetime.hour
#         en_yakin = min(hours_data, key=lambda h: abs(int(h["datetime"].split(":")[0]) - hedef_saat))

#         return {
#             "temp": en_yakin.get("temp", 15.0),
#             "feelslike": en_yakin.get("feelslike", 14.0),
#             "humidity": en_yakin.get("humidity", 50),
#             "dew": en_yakin.get("dew", 10.0),
#             "pressure": en_yakin.get("pressure", 1012.0),
#             "windspeed": en_yakin.get("windspeed", 10.0),
#             "windgust": en_yakin.get("windgust", 20.0),
#             "winddir": en_yakin.get("winddir", 180),
#             "cloudcover": en_yakin.get("cloudcover", 50),
#             "uvindex": en_yakin.get("uvindex", 5),
#             "visibility": en_yakin.get("visibility", 10.0),
#             "solarradiation": en_yakin.get("solarradiation", 200.0),
#         }

#     except Exception as e:
#         print("‚ùå API Hatasƒ±:", e)
#         with open(LOG_FILE, "a", encoding="utf-8") as f:
#             f.write(f"[{datetime.datetime.now()}] HATA: {e}\n")
#         return None



st.markdown("""
    <style>
    .stNumberInput, .stSelectbox, .stSlider, .stRadio, .stTextInput {
        max-width: 1000px;
        margin: auto;
    }
    .stButton, .stSuccess {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .block-container {
        max-width: 1000px;
        margin: auto;
    }
    h1, h2, h3 {
        text-align: center;
    }
    p {
        text-align: left;
    }        
    .stButton > button {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 10px;
        font-size: 16px;
        transition: 0.2s ease;
    }
    .stButton > button:hover {
        box-shadow: 0px 0px 6px rgba(0,0,0,0.08);
        cursor: pointer;
    }
    </style>
""", unsafe_allow_html=True)


# Nav Men√º
selected = option_menu(
    menu_title="Air Pollutant Prediction Application",
    options=["Home Page", "Prediction", "Data Analysis", "Info"],
    icons=["house", "cloud", "bar-chart", "info-circle"],
    menu_icon="cast",
    default_index=0,
    orientation="horizontal",
)

if 'pollutant_selected' not in st.session_state:
    st.session_state.pollutant_selected = "PM10"

if 'weather_group_code' not in st.session_state:
    st.session_state.weather_group_code = 0

if selected == "Prediction":
    show_tahmin() 
if selected == "Data Analysis":
    show_veri_analizi() 
if selected == "Home Page":
    show_ana_sayfa()   
if selected == "Info":
    show_info()              

# # Tahmin Sayfasƒ±
# if selected == "Tahmin":
#     st.title(":foggy: ƒ∞stanbul Hava Kalitesi Tahmini")
    

#     st.markdown("#### Kirletici Se√ßiniz:")
#     cols = st.columns(7)
#     pollutants = ["PM10", "SO2", "CO", "NO2", "NOX", "NO", "O3"]

#     for i, pol in enumerate(pollutants):
#         if st.session_state.pollutant_selected == pol:
#             button_style = f"background-color:#ffe6e6;border:2px solid red;border-radius:10px;font-weight:bold;"
#         else:
#             button_style = f"background-color:#f9f9f9;border:2px solid #ccc;border-radius:10px;"

#         if cols[i].button(pol, key=f"pollutant_{pol}", use_container_width=True):
#             st.session_state.pollutant_selected = pol
    

#     selected_features = [
#     'temp', 'feelslike', 'humidity', 'dew', 'windgust',
#     'windspeed', 'pressure', 'cloudcover', 'visibility',
#     'solarradiation', 'uvindex', 'weather_group_code',
#     'hour', 'day', 'month', 'dayofweek', 'season',
#     'wind_dir_rad', 'wind_dir_sin', 'wind_dir_cos',
#     'humidity_level', 'feelslike_diff', 'is_rainy',
#     'is_weekend', 'is_nighttime', 'is_rush_hour',
#     'humid_heat_index', 'uv_level'
# ]

#     selected_pollutant = st.session_state.pollutant_selected

#     now = datetime.datetime.now()
#     today = now.date()
#     next_full_hour = (now + datetime.timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)

#     ilceler = [
#     "Adalar", "Arnavutk√∂y", "Ata≈üehir", "Avcƒ±lar", "Baƒücƒ±lar", "Bah√ßelievler",
#     "Bakƒ±rk√∂y", "Ba≈üak≈üehir", "Bayrampa≈üa", "Be≈üikta≈ü", "Beykoz", "Beylikd√ºz√º",
#     "Beyoƒülu", "B√ºy√ºk√ßekmece", "√áatalca", "√áekmek√∂y", "Esenler", "Esenyurt",
#     "Ey√ºpsultan", "Fatih", "Gaziosmanpa≈üa", "G√ºng√∂ren", "Kadƒ±k√∂y", "Kaƒüƒ±thane",
#     "Kartal", "K√º√ß√ºk√ßekmece", "Maltepe", "Pendik", "Sancaktepe", "Sarƒ±yer",
#     "Silivri", "Sultanbeyli", "Sultangazi", "≈ûile", "≈ûi≈üli", "Tuzla",
#     "√úmraniye", "√úsk√ºdar", "Zeytinburnu"
# ]

#     ilce = st.selectbox("ƒ∞l√ße Se√ßiniz", ilceler)


#     st.markdown("#### üóìÔ∏è Tahmin Edilecek Tarih ve Saat")
#     col_date, col_time = st.columns(2)
#     with col_date:
#         selected_date = st.date_input("Tarih", value=today, min_value=today, label_visibility="collapsed")
#     with col_time:
#         selected_time = st.time_input("Saat", value=next_full_hour, step=datetime.timedelta(hours=1), label_visibility="collapsed")

#     selected_datetime = datetime.datetime.combine(selected_date, selected_time)
#     if selected_datetime < now:
#         st.warning("‚ö†Ô∏è L√ºtfen ≈üimdiki zamandan daha ileri bir saat se√ßin!")

#     button_disabled = selected_datetime < datetime.datetime.now()
    


#     if st.button("üì• Hava Durumu Verilerini Otomatik Doldur", disabled=button_disabled):
#         weather_data = get_weather_by_ilce(ilce, selected_datetime)
#         if weather_data:
#             st.success("‚úÖ Veriler ba≈üarƒ±yla alƒ±ndƒ±!")
#             st.session_state["auto_weather"] = weather_data
#         else:
#             st.warning("‚ö†Ô∏è API'den veri alƒ±namadƒ±.")


#     day = selected_date.day
#     month = selected_date.month
#     dayofweek = selected_date.weekday()
#     hour = selected_time.hour
#     season = (month % 12) // 3 + 1


#     weather = st.session_state.get("auto_weather", {})

#     temp = st.number_input("Sƒ±caklƒ±k (¬∞C)", value=weather.get("temp", 15.0))
#     feelslike = st.number_input("Hissedilen Sƒ±caklƒ±k (¬∞C)", value=weather.get("feelslike", 14.0))
#     humidity = st.slider("Nem (%)", 0, 100, int(weather.get("humidity", 50)))
#     dew = st.number_input("√áiy Noktasƒ± (¬∞C)", value=weather.get("dew", 10.0))
#     windgust = st.number_input("R√ºzgar Ani Hƒ±zƒ± (km/h)", value=weather.get("windgust", 20.0))
#     windspeed = st.number_input("R√ºzgar Hƒ±zƒ± (km/h)", value=weather.get("windspeed", 10.0))
#     winddir = st.slider("R√ºzgar Y√∂n√º (0¬∞-360¬∞)", 0, 360, int(weather.get("winddir", 180)))
#     pressure = st.number_input("Basƒ±n√ß (hPa)", value=weather.get("pressure", 1012.0))
#     cloudcover = st.slider("Bulutluluk (%)", 0, 100, int(weather.get("cloudcover", 50)))
#     solarradiation = st.number_input("G√ºne≈ü Radyasyonu (W/m¬≤)", value=weather.get("solarradiation", 200.0))
#     visibility = st.number_input("G√∂r√ºn√ºrl√ºl√ºk (km)", value=weather.get("visibility", 10.0))


#     #else:
#         #solarenergy = st.number_input("Solar Enerji", value=weather.get("solarenergy", 10.0))
#         #uvindex = st.slider("UV Index", 0, 11, int(weather.get("uvindex", 5)))
        

#     st.markdown("#### Genel Hava Durumunu Se√ßiniz:")
#     weather_options = [
#         ("Partly Cloudy", 0, ":partly_sunny:"),
#         ("Clear", 1, ":sunny:"),
#         ("Overcast", 2, ":cloud:"),
#         ("Rainy", 3, ":sun_behind_rain_cloud:"),
#         ("Snowy", 4, ":snowflake:")
#     ]
#     cols = st.columns(len(weather_options))
#     for i, (label, code, icon) in enumerate(weather_options):
#         button_label = f"{icon} {label}"
#         if cols[i].button(button_label, key=f"weather_btn_{code}"):
#             st.session_state.weather_group_code = code

#     st.markdown("<br>", unsafe_allow_html=True)

#     weather_group_code = st.session_state.weather_group_code

#     wind_rad = np.deg2rad(winddir)
#     wind_dir_sin = np.sin(wind_rad)
#     wind_dir_cos = np.cos(wind_rad)
#     wind_dir_rad = wind_rad

#     # Ortak t√ºm deƒüi≈ükenler
#     input_dict = {
#         'temp': temp,
#         'feelslike': feelslike,
#         'humidity': humidity,
#         'dew': dew,
#         'windgust': windgust,
#         'windspeed': windspeed,
#         'pressure': pressure,
#         'cloudcover': cloudcover,
#         'visibility': visibility,
#         'solarradiation': solarradiation,
#         'uvindex': weather.get("uvindex", 5),
#         'weather_group_code': weather_group_code,
#         'hour': hour,
#         'day': day,
#         'month': month,
#         'dayofweek': dayofweek,
#         'season': season,
#         'wind_dir_rad': wind_rad,
#         'wind_dir_sin': wind_dir_sin,
#         'wind_dir_cos': wind_dir_cos,
#         'humidity_level': humidity / 100,
#         'feelslike_diff': abs(temp - feelslike),
#         'is_rainy': 1 if weather_group_code == 3 else 0,
#         'is_weekend': 1 if dayofweek >= 5 else 0,
#         'is_nighttime': 1 if (hour < 6 or hour > 22) else 0,
#         'is_rush_hour': 1 if (7 <= hour <= 9 or 17 <= hour <= 19) else 0,
#         'humid_heat_index': (humidity / 100) * feelslike,
#         'uv_level': 0 if weather.get("uvindex", 5) <= 2 else (1 if weather.get("uvindex", 5) <= 5 else 2)
#     }

# # Ortak input verisi
#     input_data = pd.DataFrame([[input_dict[feat] for feat in selected_features]], columns=selected_features)


    

#     if st.button(f" üéØ {selected_pollutant} Tahminini Hesapla üéØ"):
#          if selected_datetime < now:
#             st.error("‚ö†Ô∏è Ge√ßmi≈ü saat ile tahmin yapƒ±lamaz!")
#          else:
            
#             model_paths = {
#                 "PM10": "pm10_model.pkl",
#                 "SO2": "so2_model.pkl",
#                 "CO": "co_model.pkl",
#                 "NO2": "no2_model.pkl",
#                 "NO": "no_model.pkl",
#                 "NOX": "nox_model.pkl",
#                 "O3": "o3_model.pkl"
#             }
#             model_path = model_paths[selected_pollutant]

           
#             with open(model_path, "rb") as f:
#                 data = pickle.load(f)
#             model = data["model"]
#             mae = data["mae"]

#             prediction = model.predict(input_data)[0]
#             lower = max(0, prediction - mae)
#             upper = prediction + mae


            # thresholds = {
            #     "PM10":    [31.16, 36.43, 41.16],
            #     "SO2":     [1.83, 2.30, 2.97],
            #     "CO":      [617.96, 751.70, 927.96],
            #     "NO2":     [27.04, 36.85, 49.93],
            #     "NO":      [6.20, 11.84, 20.92],
            #     "NOX":     [38.72, 56.03, 81.46],
            #     "O3":      [23.58, 37.75, 52.00]
            # }

            # explanations = {
            #     "PM10": [
            #     "Hava kalitesi m√ºkemmel. PM10 seviyeleri √ßok d√º≈ü√ºk ve saƒülƒ±ƒüa herhangi bir olumsuz etkisi beklenmez. Her ya≈ü grubundaki bireyler i√ßin dƒ±≈ü ortam aktiviteleri g√ºvenlidir. A√ßƒ±k havada uzun s√ºre kalƒ±nabilir, spor yapƒ±labilir.",
            #     "Hava kalitesi genel halk i√ßin h√¢l√¢ kabul edilebilir d√ºzeydedir. Ancak solunum yollarƒ± hassas olan bireylerde (astƒ±m, KOAH, ya≈ülƒ±lar, √ßocuklar) hafif etkiler ortaya √ßƒ±kabilir. A√ßƒ±k hava aktivitelerinde dikkatli olunmalƒ±, belirtiler takip edilmelidir.",
            #     "PM10 seviyeleri saƒülƒ±ksƒ±z d√ºzeydedir. √ñzellikle solunum sƒ±kƒ±ntƒ±sƒ± ya≈üayan bireyler a√ßƒ±k havada kalmaktan ka√ßƒ±nmalƒ±dƒ±r. Maske kullanƒ±mƒ± ve kapalƒ± ortamda bulunma tercih edilmelidir. Dƒ±≈ü mek√¢nda fiziksel aktiviteler sƒ±nƒ±rlandƒ±rƒ±lmalƒ±dƒ±r.",
            #     "Hava ciddi d√ºzeyde kirli. PM10 maruziyeti √∂zellikle kronik hastalƒ±ƒüƒ± olanlar i√ßin tehlikelidir. Dƒ±≈üarƒ± √ßƒ±kƒ±lmamalƒ±, pencereler kapalƒ± tutulmalƒ± ve m√ºmk√ºnse hava temizleyici kullanƒ±lmalƒ±dƒ±r. Gerekiyorsa tƒ±bbi destek alƒ±nmalƒ±dƒ±r."
            #     ],


            #     "SO2": [
            #     "SO2 seviyesi olduk√ßa d√º≈ü√ºkt√ºr. Hava solunum a√ßƒ±sƒ±ndan g√ºvenli kabul edilir. Herkes rahatlƒ±kla dƒ±≈ü mek√¢nda zaman ge√ßirebilir. √ñzellikle hassas bireyler i√ßin endi≈üe verici bir durum yoktur.",
            #     "SO2 seviyeleri orta d√ºzeydedir. Hassas gruplarda (astƒ±m, bron≈üit hastalarƒ±) g√∂zlerde sulanma veya boƒüazda tahri≈ü olu≈üabilir. A√ßƒ±k havada uzun s√ºreli kalƒ±nacaksa dikkatli olunmalƒ±dƒ±r. Belirti g√∂r√ºl√ºrse i√ß ortama ge√ßilmesi √∂nerilir.",
            #     "SO2 deƒüerleri saƒülƒ±ksƒ±z seviyelere ula≈ümƒ±≈ütƒ±r. Solunum yollarƒ±nda tahri≈ü, √∂ks√ºr√ºk ve g√∂zlerde yanma gibi etkiler olabilir. Hassas bireyler m√ºmk√ºnse dƒ±≈ü ortama √ßƒ±kmamalƒ±dƒ±r. ƒ∞√ß mek√¢nlar tercih edilmeli, havalandƒ±rma iyi yapƒ±lmalƒ±dƒ±r.",
            #     "SO2 seviyesi tehlikeli d√ºzeyde y√ºksektir. A√ßƒ±k havada bulunmak ciddi solunum problemlerine yol a√ßabilir. √ñzellikle √ßocuklar, ya≈ülƒ±lar ve kronik hastalƒ±ƒüƒ± olanlar kapalƒ± alanlarda kalmalƒ±dƒ±r. Gerekiyorsa tƒ±bbi yardƒ±m alƒ±nmalƒ±dƒ±r."
            #    ],

            #     "CO": [
            #     "Karbonmonoksit seviyesi √ßok d√º≈ü√ºkt√ºr. Hava kalitesi a√ßƒ±sƒ±ndan herhangi bir risk olu≈üturmaz. A√ßƒ±k ve kapalƒ± alanlarda herkes g√ºvenle bulunabilir. Egzersiz yapmak veya dƒ±≈ü ortamda uzun s√ºre kalmak sakƒ±ncalƒ± deƒüildir.",
            #     "CO seviyeleri orta d√ºzeydedir. Uzun s√ºreli maruziyet bazƒ± bireylerde ba≈ü aƒürƒ±sƒ±, halsizlik gibi belirtilere neden olabilir. √ñzellikle kapalƒ± ve havasƒ±z alanlarda dikkatli olunmalƒ±dƒ±r. Egzersiz yaparken ortamƒ±n havalandƒ±rƒ±ldƒ±ƒüƒ±ndan emin olun.",
            #     "CO konsantrasyonu saƒülƒ±ksƒ±z seviyeye ula≈ümƒ±≈ütƒ±r. Ba≈ü d√∂nmesi, mide bulantƒ±sƒ± ve yorgunluk gibi etkiler g√∂r√ºlebilir. Kapalƒ± alanlar sƒ±k√ßa havalandƒ±rƒ±lmalƒ± ve uzun s√ºre kalmaktan ka√ßƒ±nƒ±lmalƒ±dƒ±r. Belirti hissedildiƒüinde ortam terk edilmelidir.",
            #     "CO seviyesi tehlikeli boyuttadƒ±r. Bilin√ß kaybƒ± ve bayƒ±lma riski ciddi ≈üekilde artar. Kapalƒ± ortamlarda durulmamalƒ±, hemen temiz havaya √ßƒ±kƒ±lmalƒ±dƒ±r. Gerekirse acil tƒ±bbi yardƒ±m alƒ±nmalƒ±dƒ±r."
            #    ],

            #     "NO2": [
            #     "NO2 seviyesi √ßok d√º≈ü√ºkt√ºr. Hava kalitesi olduk√ßa iyidir ve dƒ±≈ü ortam aktiviteleri herkes i√ßin g√ºvenlidir. Solunum yolu √ºzerinde olumsuz bir etki beklenmez. A√ßƒ±k havada egzersiz ve y√ºr√ºy√º≈ü yapƒ±labilir.",
            #     "NO2 seviyeleri orta d√ºzeydedir. Hassas bireylerde (√∂zellikle astƒ±m ve bron≈üit hastalarƒ±) hafif semptomlar geli≈üebilir. A√ßƒ±k havada uzun s√ºreli bulunma halinde dikkatli olunmalƒ±, belirtiler takip edilmelidir.",
            #     "NO2 seviyesi saƒülƒ±ksƒ±z aralƒ±ƒüa ula≈ümƒ±≈ütƒ±r. Boƒüazda yanma, g√∂zlerde sulanma ve nefes darlƒ±ƒüƒ± gibi etkiler g√∂r√ºlebilir. √ñzellikle √ßocuklar ve ya≈ülƒ±lar a√ßƒ±k havada bulunmaktan ka√ßƒ±nmalƒ±dƒ±r.",
            #     "NO2 d√ºzeyi ciddi saƒülƒ±k riski ta≈üƒ±r. Akciƒüer fonksiyonlarƒ±nƒ± olumsuz etkileyebilir ve mevcut solunum hastalƒ±klarƒ±nƒ± aƒüƒ±rla≈ütƒ±rabilir. Kapalƒ± ortamlarda kalƒ±nmalƒ±, dƒ±≈üarƒ± √ßƒ±kƒ±lmasƒ± gerekiyorsa maske kullanƒ±lmalƒ±dƒ±r."
            #    ],

            #     "NO": [
            #     "NO seviyesi olduk√ßa d√º≈ü√ºkt√ºr ve saƒülƒ±k a√ßƒ±sƒ±ndan herhangi bir risk te≈ükil etmez. Dƒ±≈ü mek√¢n aktiviteleri g√ºvenle yapƒ±labilir. Solunum yollarƒ±nda olumsuz bir etki beklenmez. Hava kalitesi genel olarak iyidir.",
            #     "NO seviyesi orta d√ºzeydedir. √ñzellikle hassas bireylerde (astƒ±m, KOAH hastalarƒ±) hafif solunum semptomlarƒ± olu≈üabilir. A√ßƒ±k havada uzun s√ºreli fiziksel aktivite yapƒ±lacaksa dikkatli olunmalƒ±dƒ±r.",
            #     "NO seviyesi saƒülƒ±ksƒ±z d√ºzeydedir. Solunum yollarƒ±nda tahri≈ü, √∂ks√ºr√ºk veya nefes darlƒ±ƒüƒ±na neden olabilir. Kapalƒ± ortamlarda kalmak ve gerekiyorsa maske takmak faydalƒ± olacaktƒ±r.",
            #     "NO seviyesi y√ºksek ve tehlikelidir. Solunum sistemi √ºzerindeki etkileri ciddi olabilir. √ñzellikle hassas bireyler dƒ±≈üarƒ± √ßƒ±kmamalƒ±, kapalƒ± ortamlarda kalmalƒ± ve tƒ±bbi destek gerekebilir."
            #    ],

            #     "NOX": [
            #     "NOX seviyeleri olduk√ßa d√º≈ü√ºkt√ºr. Hava kalitesi saƒülƒ±klƒ± ve g√ºvenlidir. Herkes rahatlƒ±kla dƒ±≈ü ortamda vakit ge√ßirebilir. Solunum yolu problemleri beklenmez.",
            #     "NOX seviyeleri orta d√ºzeydedir. √ñzellikle hassas gruplar i√ßin (√ßocuklar, ya≈ülƒ±lar, astƒ±m hastalarƒ±) dikkatli olunmalƒ±dƒ±r. Uzun s√ºreli a√ßƒ±k hava temasƒ±ndan ka√ßƒ±nmak faydalƒ± olabilir.",
            #     "NOX seviyesi saƒülƒ±ksƒ±z d√ºzeydedir. Astƒ±m, bron≈üit gibi solunum hastalƒ±klarƒ±nƒ± tetikleyebilir. A√ßƒ±k hava aktiviteleri azaltƒ±lmalƒ±, kapalƒ± ortamlarda kalƒ±nmalƒ±dƒ±r.",
            #     "NOX konsantrasyonu tehlikeli d√ºzeye ula≈ümƒ±≈ütƒ±r. Solunum yollarƒ± √ºzerinde ciddi etkilere yol a√ßabilir. Dƒ±≈üarƒ± √ßƒ±kƒ±lmamalƒ±, pencere ve kapƒ±lar kapalƒ± tutulmalƒ±dƒ±r. Gerekiyorsa tƒ±bbi destek alƒ±nmalƒ±dƒ±r."
            #    ],

            #     "O3": [
            #     "Ozon seviyesi √ßok d√º≈ü√ºkt√ºr ve hava kalitesi m√ºkemmeldir. A√ßƒ±k havada kalmak herkes i√ßin g√ºvenlidir. Spor ve y√ºr√ºy√º≈ü gibi fiziksel aktiviteler g√∂n√ºl rahatlƒ±ƒüƒ±yla yapƒ±labilir.",
            #     "Ozon seviyesi orta d√ºzeydedir. √ñzellikle g√ºne≈üli saatlerde hassas bireylerde g√∂zlerde yanma veya hafif nefes darlƒ±ƒüƒ± olu≈üabilir. Uzun s√ºreli dƒ±≈ü ortam maruziyetinden ka√ßƒ±nƒ±lmalƒ±dƒ±r.",
            #     "Ozon seviyesi saƒülƒ±ksƒ±z seviyeye ula≈ümƒ±≈ütƒ±r. Boƒüaz tahri≈üi, ba≈ü aƒürƒ±sƒ± ve nefes alma g√º√ßl√ºƒü√º gibi belirtiler g√∂r√ºlebilir. √ñƒüle saatlerinde dƒ±≈üarƒ±da bulunmak √∂nerilmez.",
            #     "Ozon seviyesi √ßok y√ºksektir ve ciddi saƒülƒ±k riskleri olu≈üturabilir. G√ºne≈üli saatlerde dƒ±≈ü ortamdan uzak durulmalƒ±, pencereler kapalƒ± tutulmalƒ±dƒ±r. Hassas bireyler kapalƒ±, filtreli ortamlarda kalmalƒ±dƒ±r."
            #    ]

            # }

            # if selected_pollutant in thresholds:
            #     p25, p50, p75 = thresholds[selected_pollutant]
            #     if prediction <= p25:
            #         bg_color = "#d4edda"
            #         border_color = "#28a745"
            #         explanation = explanations[selected_pollutant][0]
            #     elif prediction <= p50:
            #         bg_color = "#fff3cd"
            #         border_color = "#ffc107"
            #         explanation = explanations[selected_pollutant][1]
            #     elif prediction <= p75:
            #         bg_color = "#ffe0b2"
            #         border_color = "#f57c00"
            #         explanation = explanations[selected_pollutant][2]
            #     else:
            #         bg_color = "#f8d7da"
            #         border_color = "#dc3545"
            #         explanation = explanations[selected_pollutant][3]
            # else:
            #     bg_color = "#f0f9ff"
            #     border_color = "#2a9df4"
            #     explanation = ""

            # st.markdown(f"""
            # <div style='
            #     padding: 20px;
            #     margin-top: 20px;
            #     border-radius: 10px;
            #     background-color: {bg_color};
            #     border-left: 6px solid {border_color};
            #     text-align: center;'>
            #     <h3 style='color:{border_color}; margin-bottom: 10px;'>üå´Ô∏è {selected_pollutant} Tahmini</h3>
            #     <h2 style='font-size: 28px; font-weight: bold; margin: 0;'>{prediction:.2f} ¬µg/m¬≥</h2>
            #     <h style='font-size: 16px; color: #333;'>( Beklenen aralƒ±k: {lower:.2f} ‚Äì {upper:.2f} ¬µg/m¬≥ )</h>
            #     <p style='margin-top: 15px; font-size: 18px; font-weight: 600; color: #333;'>{explanation}</p>
            # </div>
            # """, unsafe_allow_html=True)


# elif selected == "Genel HKƒ∞ Tahmini":
#     st.title("üåç Genel Hava Kalitesi (HKƒ∞) Tahmini")

#     now = datetime.datetime.now()
#     today = now.date()
#     next_full_hour = (now + datetime.timedelta(hours=1)).replace(minute=0, second=0, microsecond=0)

#     ilceler = [
#         "Adalar", "Arnavutk√∂y", "Ata≈üehir", "Avcƒ±lar", "Baƒücƒ±lar", "Bah√ßelievler",
#         "Bakƒ±rk√∂y", "Ba≈üak≈üehir", "Bayrampa≈üa", "Be≈üikta≈ü", "Beykoz", "Beylikd√ºz√º",
#         "Beyoƒülu", "B√ºy√ºk√ßekmece", "√áatalca", "√áekmek√∂y", "Esenler", "Esenyurt",
#         "Ey√ºpsultan", "Fatih", "Gaziosmanpa≈üa", "G√ºng√∂ren", "Kadƒ±k√∂y", "Kaƒüƒ±thane",
#         "Kartal", "K√º√ß√ºk√ßekmece", "Maltepe", "Pendik", "Sancaktepe", "Sarƒ±yer",
#         "Silivri", "Sultanbeyli", "Sultangazi", "≈ûile", "≈ûi≈üli", "Tuzla",
#         "√úmraniye", "√úsk√ºdar", "Zeytinburnu"
#     ]

#     ilce = st.selectbox("ƒ∞l√ße Se√ßiniz", ilceler)

#     st.markdown("#### üóìÔ∏è Tahmin Edilecek Tarih ve Saat")
#     col_date, col_time = st.columns(2)
#     with col_date:
#         selected_date = st.date_input("Tarih", value=today, min_value=today, label_visibility="collapsed")
#     with col_time:
#         selected_time = st.time_input("Saat", value=next_full_hour, step=datetime.timedelta(hours=1), label_visibility="collapsed")

#     selected_datetime = datetime.datetime.combine(selected_date, selected_time)
#     button_disabled = selected_datetime < now

#     if st.button("üì• Hava Durumu Verilerini Otomatik Doldur", disabled=button_disabled):
#         weather_data = get_weather_by_ilce(ilce, selected_datetime)
#         if weather_data:
#             st.success("‚úÖ Veriler ba≈üarƒ±yla alƒ±ndƒ±!")
#             st.session_state["auto_weather_hki"] = weather_data
#         else:
#             st.warning("‚ö†Ô∏è API'den veri alƒ±namadƒ±.")

#     weather = st.session_state.get("auto_weather_hki", {})

#     # üìÇ Detaylƒ± veri g√∂sterme kutusu
#     show_inputs = st.checkbox("üìÇ Detaylƒ± Hava Durumu Verilerini G√∂ster", value=False)

#     if show_inputs:
#     # Kullanƒ±cƒ±nƒ±n doldurduƒüu inputlardan veri topla
#         temp = st.number_input("Sƒ±caklƒ±k (¬∞C)", value=weather.get("temp", 15.0))
#         feelslike = st.number_input("Hissedilen Sƒ±caklƒ±k (¬∞C)", value=weather.get("feelslike", 14.0))
#         humidity = st.slider("Nem (%)", 0, 100, int(weather.get("humidity", 50)))
#         dew = st.number_input("√áiy Noktasƒ± (¬∞C)", value=weather.get("dew", 10.0))
#         windgust = st.number_input("R√ºzgar Ani Hƒ±zƒ± (km/h)", value=weather.get("windgust", 20.0))
#         windspeed = st.number_input("R√ºzgar Hƒ±zƒ± (km/h)", value=weather.get("windspeed", 10.0))
#         winddir = st.slider("R√ºzgar Y√∂n√º (0¬∞-360¬∞)", 0, 360, int(weather.get("winddir", 180)))
#         pressure = st.number_input("Basƒ±n√ß (hPa)", value=weather.get("pressure", 1012.0))
#         cloudcover = st.slider("Bulutluluk (%)", 0, 100, int(weather.get("cloudcover", 50)))
#         solarradiation = st.number_input("G√ºne≈ü Radyasyonu (W/m¬≤)", value=weather.get("solarradiation", 200.0))
#         visibility = st.number_input("G√∂r√ºn√ºrl√ºl√ºk (km)", value=weather.get("visibility", 10.0))

#     else:
#     # Otomatik API'den gelen verilerle doldur
#         temp = weather.get("temp", 15.0)
#         feelslike = weather.get("feelslike", 14.0)
#         humidity = weather.get("humidity", 50)
#         dew = weather.get("dew", 10.0)
#         windgust = weather.get("windgust", 20.0)
#         windspeed = weather.get("windspeed", 10.0)
#         winddir = weather.get("winddir", 180)
#         pressure = weather.get("pressure", 1012.0)
#         cloudcover = weather.get("cloudcover", 50)
#         solarradiation = weather.get("solarradiation", 200.0)
#         visibility = weather.get("visibility", 10.0)

# # üß† Burada ortak olarak input_data her zaman tanƒ±mlanacak:
#     weather_group_code = st.session_state.weather_group_code

#     input_dict = {
#         'temp': temp,
#         'feelslike': feelslike,
#         'humidity': humidity,
#         'dew': dew,
#         'windgust': windgust,
#         'windspeed': windspeed,
#         'pressure': pressure,
#         'cloudcover': cloudcover,
#         'visibility': visibility,
#         'solarradiation': solarradiation,
#         'uvindex': weather.get("uvindex", 5),
#         'weather_group_code': weather_group_code,
#         'hour': selected_time.hour,
#         'day': selected_date.day,
#         'month': selected_date.month,
#         'dayofweek': selected_date.weekday(),
#         'season': (selected_date.month % 12) // 3 + 1,
#         'wind_dir_rad': np.deg2rad(winddir),
#         'wind_dir_sin': np.sin(np.deg2rad(winddir)),
#         'wind_dir_cos': np.cos(np.deg2rad(winddir)),
#         'humidity_level': humidity / 100,
#         'feelslike_diff': abs(temp - feelslike),
#         'is_rainy': 1 if weather_group_code == 3 else 0,
#         'is_weekend': 1 if selected_date.weekday() >= 5 else 0,
#         'is_nighttime': 1 if selected_time.hour < 6 or selected_time.hour > 22 else 0,
#         'is_rush_hour': 1 if (7 <= selected_time.hour <= 9 or 17 <= selected_time.hour <= 19) else 0,
#         'humid_heat_index': (humidity / 100) * feelslike,
#         'uv_level': 0 if weather.get("uvindex", 5) <= 2 else (1 if weather.get("uvindex", 5) <= 5 else 2)
#     }

#     input_data = pd.DataFrame([input_dict])


#  # Tahmin butonu
#     if st.button("üåç Genel HKƒ∞ Tahminini Hesapla"):
#             if selected_datetime < now:
#                  st.error("‚ö†Ô∏è Ge√ßmi≈ü saat ile tahmin yapƒ±lamaz!")
#             else:
#                 pollutant_models = {
#                     "PM10": "pm10_model.pkl",
#                     "SO2": "so2_model.pkl",
#                     "CO": "co_model.pkl",
#                     "NO2": "no2_model.pkl",
#                     "O3": "o3_model.pkl"
#                 }

#                 thresholds = {
#                     "PM10": [23.8, 35.1, 47.1],
#                     "SO2": [1.6, 2.3, 3.2],
#                     "CO": [521.3, 724.6, 1007.2],
#                     "NO2": [24.9, 35.7, 51.2],
#                     "O3": [19.8, 37.8, 55.0]
#                 }

#                 class_names = ["ƒ∞yi", "Fena Deƒüil", "Hassas Gruplar i√ßin Riskli", "K√∂t√º"]
#                 results = {}

#                 for pol, model_path in pollutant_models.items():
#                     with open(model_path, "rb") as f:
#                         data = pickle.load(f)
#                     model = data["model"]
#                     features = data["features"]
#                     pred = model.predict(input_data[features])[0]

#                     p25, p50, p75 = thresholds[pol]
#                     if pred <= p25:
#                         pol_class = 1
#                     elif pred <= p50:
#                         pol_class = 2
#                     elif pred <= p75:
#                         pol_class = 3
#                     else:
#                         pol_class = 4
#                     results[pol] = {"prediction": pred, "class": pol_class}

#                 # En k√∂t√º (en y√ºksek) sƒ±nƒ±fƒ± bul
#                 worst_pollutant = max(results, key=lambda x: results[x]["class"])
#                 genel_sinif = results[worst_pollutant]["class"]

#                 # Renk ayarlarƒ±
#                 color_codes = {1: "#d4edda", 2: "#fff3cd", 3: "#ffe0b2", 4: "#f8d7da"}
#                 border_codes = {1: "#28a745", 2: "#ffc107", 3: "#f57c00", 4: "#dc3545"}

#                 explanations = {
#                     1: "Hava kalitesi iyi. Dƒ±≈üarƒ±da zaman ge√ßirebilirsiniz.",
#                     2: "Hava kalitesi fena deƒüil. Hassas gruplar dikkatli olmalƒ±.",
#                     3: "Hava hassas gruplar i√ßin riskli. Dikkatli olunmalƒ±.",
#                     4: "Hava kalitesi k√∂t√º. Dƒ±≈üarƒ± √ßƒ±kmaktan ka√ßƒ±nƒ±n."
#                 }

#                 st.markdown(f"""
#                 <div style='padding: 20px; margin-top: 20px; border-radius: 10px;
#                     background-color: {color_codes[genel_sinif]};
#                     border-left: 6px solid {border_codes[genel_sinif]};
#                     text-align: center;'>
#                     <h3 style='color:{border_codes[genel_sinif]};'>üåç Genel Hava Kalitesi Durumu:</h3>
#                     <h2>{class_names[genel_sinif-1]}</h2>
#                     <p style='font-size:18px;'>En etkili kirletici: <strong>{worst_pollutant}</strong> ({results[worst_pollutant]["prediction"]:.2f} ¬µg/m¬≥)</p>
#                     <p>{explanations[genel_sinif]}</p>
#                 </div>
#                 """, unsafe_allow_html=True)


# elif selected == "Ana Sayfa":
#     st.title("üè† Ana Sayfa")
#     st.header("üå´Ô∏è Hava Kirliliƒüi Nedir?")

#     st.markdown("""
#     <div style='text-align: left ; font-size: 18px;'>
#         <p>
#           Hava kirliliƒüi, atmosferde insan saƒülƒ±ƒüƒ± ve √ßevresel denge √ºzerinde olumsuz etkilere yol a√ßabilecek d√ºzeyde zararlƒ± gazlarƒ±n, partik√ºllerin ve 
#           kimyasal bile≈üiklerin birikmesiyle olu≈üur. Ba≈üta fosil yakƒ±t t√ºketimi olmak √ºzere sanayi faaliyetleri, motorlu ta≈üƒ±t emisyonlarƒ±, 
#           enerji √ºretimi ve ƒ±sƒ±nma gibi insan kaynaklƒ± etkenler, hava kalitesinin bozulmasƒ±nda b√ºy√ºk rol oynamaktadƒ±r. Bu s√ºre√ßte PM10, SO‚ÇÇ, CO, NO‚ÇÇ, NO, NO‚Çì ve O‚ÇÉ 
#           gibi √ße≈üitli hava kirleticileri doƒürudan veya dolaylƒ± yollarla atmosfere yayƒ±lmakta ve yoƒüunla≈ütƒ±k√ßa insan saƒülƒ±ƒüƒ±nƒ± tehdit edici seviyelere ula≈üabilmektedir.     
#        </p> 
          
#        <p>    
#          Hava kirliliƒüi; solunum yolu hastalƒ±klarƒ±, kalp-damar rahatsƒ±zlƒ±klarƒ±, alerjik reaksiyonlar ve hatta erken √∂l√ºmler gibi ciddi saƒülƒ±k sorunlarƒ±na yol a√ßabilmektedir.
#          D√ºnya Saƒülƒ±k √ñrg√ºt√º (WHO), hava kirliliƒüini g√ºn√ºm√ºzde insan saƒülƒ±ƒüƒ±nƒ± tehdit eden en b√ºy√ºk √ßevresel risk fakt√∂rlerinden biri olarak tanƒ±mlamaktadƒ±r.     
#        </p>       
#     </div>           
#     """,unsafe_allow_html=True)

#     st.markdown("<div style='padding-top: 10px;'></div>", unsafe_allow_html=True)
#     col1, col2 = st.columns(2)

#     with col1:
#      image = Image.open("images/image1.png")
#      resized_image = image.resize((400, 400))  # (geni≈ülik, y√ºkseklik)
#      st.image(resized_image)

#     with col2:
#      image = Image.open("images/image2.png")
#      resized_image = image.resize((400, 400))  # (geni≈ülik, y√ºkseklik)
#      st.image(resized_image)


#     st.header(" ƒ∞stanbul‚Äôda Hava Kirliliƒüi")
#     st.markdown("""
#     <div style='padding-bottom: 20px; text-align: left ; font-size: 18px;'>            
#        <p>
#           ƒ∞stanbul, coƒürafi ve demografik √∂zellikleri itibarƒ±yla T√ºrkiye'nin hava kirliliƒüi a√ßƒ±sƒ±ndan en riskli kentlerinden biridir.
#           Yakla≈üƒ±k 16 milyonluk n√ºfusu, yoƒüun ara√ß trafiƒüi, sanayi tesisleri, bireysel ƒ±sƒ±nma y√∂ntemleri ve kentsel yapƒ±la≈üma yoƒüunluƒüu ƒ∞stanbul‚Äôu √ßevresel 
#           a√ßƒ±dan kƒ±rƒ±lgan hale getirmektedir. √ñzellikle sabah ve ak≈üam saatlerinde Boƒüaz k√∂pr√ºlerinde ya≈üanan trafik yoƒüunluƒüu ciddi miktarda motorlu ta≈üƒ±t emisyonuna yol a√ßmakta,
#           egzoz gazlarƒ± ile partik√ºl madde (PM10), azot dioksit (NO‚ÇÇ) ve karbon monoksit (CO) gibi zararlƒ± kirleticiler ≈üehir atmosferine karƒ±≈ümaktadƒ±r. 
#           Y√ºksek yapƒ±la≈ümanƒ±n ve dar sokaklarƒ±n olduƒüu b√∂lgelerde bu emisyonlarƒ±n daƒüƒ±lmasƒ± g√º√ßle≈ümekte ve yer seviyesinde birikime neden olmaktadƒ±r.      
#        </p> 
          
#        <p>    
#          Kƒ±≈ü aylarƒ±nda fosil yakƒ±t kullanƒ±mƒ±na dayalƒ± bireysel ƒ±sƒ±nma, √∂zellikle d√º≈ü√ºk gelirli semtlerde kalitesiz yakƒ±t kullanƒ±mƒ±yla birle≈ütiƒüinde hava kalitesini ciddi bi√ßimde
#          bozmaktadƒ±r. Bacalardan √ßƒ±kan dumanlar yoƒüun konut b√∂lgelerine yayƒ±lƒ±rken, r√ºzgarsƒ±z ve ters sƒ±caklƒ±k tabakasƒ± (inversiyon) gibi meteorolojik ko≈üullar kirleticilerin
#          uzun s√ºre atmosferde kalmasƒ±na sebep olur. ƒ∞stanbul‚Äôun topografyasƒ± da bu sorunu derinle≈ütiren bir fakt√∂rd√ºr; belirli b√∂lgelerde kirli hava tabakasƒ± yer
#          seviyesinde hapsolmakta ve solunan havanƒ±n kalitesini ciddi bi√ßimde d√º≈ü√ºrmektedir.      
#        </p> 
                
#        <p>    
#           Sanayi tesisleri de hava kirliliƒüinde √∂nemli bir yer tutmaktadƒ±r. ≈ûehrin √ßeperlerinde ve bazƒ± i√ß b√∂lgelerde konumlanan bu tesisler, 
#           √∂zellikle ak≈üam saatlerinde yoƒüun gaz ve duman salƒ±mƒ± yaparak sadece havayƒ± deƒüil, aynƒ± zamanda genel ya≈üam kalitesini ve ekolojik dengeleri tehdit etmektedir.
#           Bu kirleticiler tarƒ±m arazileri, su kaynaklarƒ± ve doƒüal ya≈üam alanlarƒ± √ºzerinde de olumsuz etkilere yol a√ßabilir.      
#        </p>
                
#        <p>    
#           D√ºnya Saƒülƒ±k √ñrg√ºt√º (WHO) sƒ±nƒ±r deƒüerlerine g√∂re ƒ∞stanbul‚Äôun bazƒ± b√∂lgelerinde yƒ±l boyunca PM10 ve NO‚ÇÇ seviyeleri kritik e≈üikleri a≈ümakta, 
#           bu da ba≈üta astƒ±m ve KOAH olmak √ºzere pek √ßok solunum yolu hastalƒ±ƒüƒ±nƒ± tetiklemektedir. Kentin s√ºrd√ºr√ºlebilirliƒüi, ya≈üam kalitesinin artƒ±rƒ±lmasƒ± ve halk saƒülƒ±ƒüƒ±nƒ±n 
#           korunmasƒ± i√ßin ula≈üƒ±m sistemlerinin modernle≈ütirilmesi, temiz enerji kaynaklarƒ±nƒ±n te≈üvik edilmesi, sanayi emisyonlarƒ±nƒ±n sƒ±kƒ± bi√ßimde
#           denetlenmesi ve bireysel farkƒ±ndalƒ±k √ßalƒ±≈ümalarƒ±nƒ±n yaygƒ±nla≈ütƒ±rƒ±lmasƒ± b√ºy√ºk √∂nem ta≈üƒ±maktadƒ±r.
#        </p>
                                                  
#     </div>            
#     """,unsafe_allow_html=True)

#     col1, col2 = st.columns(2)

#     with col1:
#      image = Image.open("images/image11.png")
#      resized_image = image.resize((700, 400))  # (geni≈ülik, y√ºkseklik)
#      st.image(resized_image)

#     with col2:
#      image = Image.open("images/image7.png")
#      resized_image = image.resize((700, 400))  # (geni≈ülik, y√ºkseklik)
#      st.image(resized_image)

#     col1, col2 = st.columns(2)

#     with col1:
#      image = Image.open("images/image9.png")
#      resized_image = image.resize((700, 400))  # (geni≈ülik, y√ºkseklik)
#      st.image(resized_image)

#     with col2:
#      image = Image.open("images/image10.png")
#      resized_image = image.resize((700, 400))  # (geni≈ülik, y√ºkseklik)
#      st.image(resized_image)




#     st.header("ü§ñ Bu Uygulama Ne Sunar?")
#     st.markdown("""
#     <div style='padding-bottom: 20px; text-align: left ; font-size: 18px;'>                     
#               Bu uygulama, meteorolojik veriler doƒürultusunda hava kirleticilerinin (PM10, SO‚ÇÇ, CO, NO‚ÇÇ, NOX, NO ve O‚ÇÉ) tahminini yaparak kullanƒ±cƒ±larƒ± olasƒ± hava kirliliƒüi d√ºzeyleri
#               hakkƒ±nda √∂nceden bilgilendirmeyi hedeflemektedir. Geli≈ütirilen makine √∂ƒürenmesi modelleri sayesinde kullanƒ±cƒ±, sƒ±caklƒ±k, nem, r√ºzgar gibi hava durumu parametrelerini
#               girerek geleceƒüe y√∂nelik kirletici seviyelerini tahmin edebilir. Bu sayede bireyler; spor, ula≈üƒ±m, dƒ±≈ü mek√¢n etkinlikleri gibi g√ºnl√ºk planlarƒ±nƒ± daha saƒülƒ±klƒ± bir 
#               √ßevresel farkƒ±ndalƒ±kla yapabileceklerdir.
#               Uygulama aynƒ± zamanda model performanslarƒ±nƒ± g√∂rselle≈ütiren ara√ßlar, zamana baƒülƒ± analizler ve √∂zellik √∂nem grafikleriyle kullanƒ±cƒ±ya derinlemesine bilgi sunmaktadƒ±r.
#               Ama√ß yalnƒ±zca tahmin sunmak deƒüil; aynƒ± zamanda farkƒ±ndalƒ±k yaratmak ve kullanƒ±cƒ±yƒ± bilin√ßli kararlar alma y√∂n√ºnde desteklemektir.            
#     </div>             
#     """,unsafe_allow_html=True)

#     st.markdown("""
#    <div style='
#         background-color: #fff3cd;
#         padding: 15px 20px;
#         margin-top: 45px;
#         border-radius: 8px;
#         font-size: 16px;'
#     >
#     <b>üìå Bilgilendirme:</b><br>
#     Bu uygulama, hava durumu verilerine dayalƒ± olarak makine √∂ƒürenmesi modelleriyle hava kirleticilerine ili≈ükin tahmini bilgiler sunar. 
#     Elde edilen sonu√ßlar, <b>kesin deƒüerler</b> olmayƒ±p yalnƒ±zca <i>bilgilendirme ve farkƒ±ndalƒ±k</i> amacƒ± ta≈üƒ±maktadƒ±r. 
#     Hava kalitesiyle ilgili alƒ±nacak kararlar i√ßin <b>resm√Æ hava kalitesi √∂l√ß√ºm sistemleri</b> ve <b>yetkili kurumlar</b> tarafƒ±ndan saƒülanan g√ºncel veriler esas alƒ±nmalƒ±dƒ±r.
#     </div>
#     """, unsafe_allow_html=True)


    

    







# elif selected == "Veri Analizi":
#     st.title("üìä Veri Analizi ve G√∂rselle≈ütirme")

#     pollutant_options = ['PM10', 'SO2', 'CO', 'NO2', 'NOX', 'NO', 'O3']
#     selected_pollutant = st.selectbox("üî¨ ƒ∞ncelenecek Kirletici:", pollutant_options)

#     viz_option = st.radio("üìà G√∂rselle≈ütirme T√ºr√º Se√ßin", [
#         "üìä Daƒüƒ±lƒ±m Grafiƒüi",
#         "‚è±Ô∏è Zaman Bazlƒ± Deƒüi≈üim",
#         "üìâ √ñzellik √ñnemi (Model)",
#         "üéØ Ger√ßek vs Tahmin",
#         "üß© Tahmin Hatasƒ± Daƒüƒ±lƒ±mƒ±"
#     ])

#     # 1. Daƒüƒ±lƒ±m Grafiƒüi
#     if viz_option == "üìä Daƒüƒ±lƒ±m Grafiƒüi":
#         st.subheader(f"{selected_pollutant} - Daƒüƒ±lƒ±m Grafiƒüi")
#         fig, ax = plt.subplots()
#         sns.histplot(df[selected_pollutant], bins=30, kde=True, ax=ax, color="skyblue")
#         ax.set_xlabel(f"{selected_pollutant} Seviyesi ¬µg/m¬≥")
#         ax.set_ylabel("Frekans")
#         st.pyplot(fig)

#     # 2. Zaman Bazlƒ± Deƒüi≈üim
#     elif viz_option == "‚è±Ô∏è Zaman Bazlƒ± Deƒüi≈üim":
#         st.subheader(f"{selected_pollutant} - Zamana Baƒülƒ± Ortalama")

#         time_granularity = st.radio("Zaman T√ºr√º Se√ßin:", ["Saatlik Ortalama", "Aylƒ±k Ortalama"], horizontal=True)

#         if time_granularity == "Saatlik Ortalama":
#             if 'hour' in df.columns:
#                 hourly_avg = df.groupby("hour")[selected_pollutant].mean()
#                 fig, ax = plt.subplots()
#                 hourly_avg.plot(kind="line", marker="o", color="tomato", ax=ax)
#                 ax.set_xlabel("Saat")
#                 ax.set_ylabel(f"{selected_pollutant} Ortalamasƒ± ¬µg/m¬≥")
#                 st.pyplot(fig)

#                 # Saatlik yorumlar
#                 if selected_pollutant == "O3":
#                     st.info("‚òÄÔ∏è **O3 (Ozon):** √ñƒüleden sonra g√ºne≈ü ƒ±≈üƒ±ƒüƒ± ile NOx tepkimeleri sonucunda artar. 14:00‚Äì16:00 arasƒ± zirve yapmasƒ± tipiktir. Gece seviyeleri d√º≈üer.")
#                 elif selected_pollutant == "PM10":
#                     st.info("üå´Ô∏è **PM10:** Gece saatlerinde (22:00‚Äì01:00) artƒ±≈ü g√∂zlenir. Bu durum, ƒ±sƒ±nma ve d√º≈ü√ºk hava sirk√ºlasyonuna baƒülƒ± olabilir. G√ºn i√ßinde ise daha stabil seyreder.")
#                 elif selected_pollutant == "SO2":
#                     st.info("üî• **SO2:** √ñƒüleden sonra 15:00 civarƒ±nda zirve yapmasƒ± sanayi kaynaklƒ± olabilir. Gece ve sabah saatlerinde d√º≈ü√º≈ü g√∂zlenmi≈ütir.")
#                 elif selected_pollutant == "CO":
#                     st.info("üöó **CO:** Sabah saatlerinde ani artƒ±≈ü trafik etkisini g√∂sterebilir. 14:00 civarƒ±ndaki ikinci zirve sanayi veya yoƒüun kent i√ßi etkile≈üimle a√ßƒ±klanabilir.")
#                 elif selected_pollutant == "NO2":
#                     st.info("üõ£ **NO2:** Gece ve ak≈üam saatlerinde y√ºksek, √∂ƒülen d√º≈ü√ºk. Bu durum g√ºne≈üli havalarda NO2'nin fotokimyasal par√ßalanmasƒ±yla a√ßƒ±klanabilir.")
#                 elif selected_pollutant == "NOX":
#                     st.info("üè≠ **NOX:** Sabah ve gece zirveleri trafiƒüe ve ƒ±sƒ±nma kaynaklƒ± emisyonlara i≈üaret eder. √ñƒüle saatlerinde d√º≈ü√º≈ü tipiktir.")
#                 elif selected_pollutant == "NO":
#                     st.info("üö¶ **NO:** Sabah saatlerinde 08‚Äì10 arasƒ± yoƒüunluk g√∂sterir. Bu durum doƒürudan egzoz emisyonlarƒ±yla ili≈ükilidir.")
            
#         elif time_granularity == "Aylƒ±k Ortalama":
#             if 'month' in df.columns:
#                 monthly_avg = df.groupby("month")[selected_pollutant].mean()
#                 fig, ax = plt.subplots()
#                 monthly_avg.plot(kind="line", marker="o", color="seagreen", ax=ax)
#                 ax.set_xlabel("Ay (1=Ocak, 12=Aralƒ±k)")
#                 ax.set_ylabel(f"{selected_pollutant} Ortalamasƒ±")
#                 st.pyplot(fig)

#                 # Aylƒ±k yorumlar
#                 if selected_pollutant == "O3":
#                     st.info("‚òÄÔ∏è **O3 (Ozon):** Yaz aylarƒ±nda (Haziran‚ÄìAƒüustos) artar √ß√ºnk√º g√ºne≈ü ƒ±≈üƒ±ƒüƒ± fotokimyasal reaksiyonlarƒ± tetikler. Kƒ±≈üƒ±n d√º≈ü√ºk seviyelerde seyreder.")
#                 elif selected_pollutant == "PM10":
#                     st.info("üå´Ô∏è **PM10:** Kƒ±≈ü aylarƒ±nda ve sonbaharda artƒ±≈ü eƒüilimi g√∂sterir. Isƒ±tma kaynaklƒ± emisyonlar ve d√º≈ü√ºk hava sirk√ºlasyonu etkili olabilir.")
#                 elif selected_pollutant == "SO2":
#                     st.info("üî• **SO2:** Kƒ±≈ü aylarƒ±nda (Ocak‚ÄìMart) zirve yapar. Fosil yakƒ±tla ƒ±sƒ±nma etkisi belirgindir. Yaz aylarƒ±nda d√º≈üer.")
#                 elif selected_pollutant == "CO":
#                     st.info("üöó **CO:** Kƒ±≈ü aylarƒ±nda ƒ±sƒ±nma ve trafik etkisiyle artƒ±≈ü olabilir. Yaz d√∂neminde deƒüerler dalgalƒ± olabilir, bazƒ± yerel etkiler g√∂zlenebilir.")
#                 elif selected_pollutant == "NO2":
#                     st.info("üõ£ **NO2:** Kƒ±≈ü aylarƒ±nda daha y√ºksek seviyelere ula≈üƒ±r. Bu durum d√º≈ü√ºk hava sirk√ºlasyonu ve g√ºne≈ü eksikliƒüi ile a√ßƒ±klanabilir.")
#                 elif selected_pollutant == "NOX":
#                     st.info("üè≠ **NOX:** Kƒ±≈ü ve ilkbahar aylarƒ±nda y√ºksek, yazƒ±n d√º≈ü√º≈ü g√∂sterir. Trafik ve ƒ±sƒ±nma kaynaklƒ± emisyonlarƒ±n etkisi b√ºy√ºkt√ºr.")
#                 elif selected_pollutant == "NO":
#                     st.info("üö¶ **NO:** Kƒ±≈ü aylarƒ±nda zirve yapar. Trafik ve ƒ±sƒ±nma etkisiyle olu≈üan doƒürudan emisyonlarƒ± yansƒ±tƒ±r. Yaz aylarƒ±nda d√º≈üer.")
      

#     # 3. √ñzellik √ñnemi
#     elif viz_option == "üìâ √ñzellik √ñnemi (Model)":
#         st.subheader(f"{selected_pollutant} - √ñzellik √ñnem Grafiƒüi")
#         with open(f"{selected_pollutant.lower()}_model.pkl", "rb") as f:
#             model_data = pickle.load(f)
#         model = model_data["model"]
#         features = model_data["features"]
#         importances = model.feature_importances_

#         importance_df = pd.DataFrame({
#             "Feature": features,
#             "Importance": importances
#         }).sort_values(by="Importance", ascending=False)

#         fig, ax = plt.subplots()
#         sns.barplot(x="Importance", y="Feature", data=importance_df.head(10), ax=ax, palette="viridis")
#         ax.set_title("En √ñnemli √ñzellikler")
#         st.pyplot(fig)

#     # 4. Ger√ßek vs Tahmin
#     elif viz_option == "üéØ Ger√ßek vs Tahmin":
#         st.subheader(f"{selected_pollutant} - Ger√ßek vs Tahmin")
#         with open(f"{selected_pollutant.lower()}_model.pkl", "rb") as f:
#             model_data = pickle.load(f)
#         model = model_data["model"]
#         features = model_data["features"]

#         X = df[features]
#         y_true = df[selected_pollutant]
#         y_pred = model.predict(X)

#         fig, ax = plt.subplots()
#         ax.scatter(y_true, y_pred, alpha=0.3, color="mediumseagreen")
#         ax.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'r--')
#         ax.set_xlabel("Ger√ßek Deƒüer")
#         ax.set_ylabel("Tahmin Edilen")
#         ax.set_title("Ger√ßek vs Tahmin Grafiƒüi")
#         st.pyplot(fig)

#     elif viz_option == "üß© Tahmin Hatasƒ± Daƒüƒ±lƒ±mƒ±":
#         st.subheader(f"{selected_pollutant} - Tahmin Hatasƒ± Daƒüƒ±lƒ±mƒ±")
#         with open(f"{selected_pollutant.lower()}_model.pkl", "rb") as f:
#             model_data = pickle.load(f)
#         model = model_data["model"]
#         features = model_data["features"]

#         X = df[features]
#         y_true = df[selected_pollutant]
#         y_pred = model.predict(X)

#         residuals = y_true - y_pred

#         fig, ax = plt.subplots()
#         sns.histplot(residuals, bins=50, kde=True, color="salmon", ax=ax)
#         ax.set_xlabel("Tahmin Hatasƒ± (Ger√ßek - Tahmin)")
#         ax.set_ylabel("Frekans")
#         ax.set_title("Hata Daƒüƒ±lƒ±mƒ±")
#         st.pyplot(fig)

#         st.info("‚ÑπÔ∏è Hatalarƒ±n sƒ±fƒ±ra yakƒ±n ve simetrik daƒüƒ±lmasƒ± modelin iyi genelle≈ütirdiƒüini g√∂sterir.")
    
    






# elif selected == "Dok√ºmantasyon":
#     st.title("‚ÑπÔ∏è Dok√ºmantasyon")
  

